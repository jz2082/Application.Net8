// <auto-generated>
using System;
using System.Linq;
using System.Threading.Tasks;
using Demo.InMemoryDb.Repository;
using InMemoryDb.DataEntity;
using InMemoryDb.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace Demo.InMemoryDb.Repository;

public class SpeakerRepositoryTests
{
    private InMemoryDbContext GetDbContext(string dbName)
    {
        var options = new DbContextOptionsBuilder<InMemoryDbContext>()
            .UseInMemoryDatabase(databaseName: dbName)
            .Options;
        return new InMemoryDbContext(options);
    }

    private SpeakerRepository GetRepository(InMemoryDbContext context)
    {
        var loggerMock = new Mock<ILogger<SpeakerRepository>>();
        return new SpeakerRepository(context, loggerMock.Object);
    }

    private SpeakerEntity GetSampleEntity(int id = 1) => new SpeakerEntity
    {
        Id = id,
        FirstName = "John",
        LastName = "Doe",
        Sat = true,
        Sun = false,
        Favorite = false,
        Bio = "Bio",
        Company = "Company",
        TwitterHandle = "@john",
        UserBioShort = "Short bio",
        ImageUrl = "http://img",
        Email = "john@example.com",
        Photo = "photo"
    };

    private Speaker GetSampleModel(int id = 1) => new Speaker
    {
        Id = id,
        FirstName = "John",
        LastName = "Doe",
        Sat = true,
        Sun = false,
        Favorite = false,
        Bio = "Bio",
        Company = "Company",
        TwitterHandle = "@john",
        UserBioShort = "Short bio",
        ImageUrl = "http://img",
        Email = "john@example.com",
        Photo = "photo"
    };

    [Fact]
    public async Task GetAllAsync_ReturnsAllSpeakers()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Speakers.Add(GetSampleEntity(1));
        context.Speakers.Add(GetSampleEntity(2));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetAllAsync();

        Assert.NotNull(result);
        Assert.Equal(2, result.Count());
    }

    [Fact]
    public async Task GetAllAsync_ReturnsEmptyList_WhenNoSpeakers()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAllAsync();

        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetAsync_ReturnsSpeaker_WhenExists()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Speakers.Add(GetSampleEntity(1));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetAsync(1);

        Assert.NotNull(result);
        Assert.Equal(1, result.Id);
    }

    [Fact]
    public async Task GetAsync_ReturnsNull_WhenNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAsync(99);

        Assert.Null(result);
    }

    [Fact]
    public async Task AddAsync_AddsSpeaker_AndReturnsSpeaker()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(1);

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal(model.Id, result.Id);
        Assert.Single(context.Speakers);
    }

    [Fact]
    public async Task AddAsync_ThrowsArgumentException_WhenNull()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.AddAsync(null));
    }

    [Fact]
    public async Task UpdateAsync_UpdatesSpeaker_AndReturnsSpeaker()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Speakers.Add(GetSampleEntity(1));
        context.SaveChanges();

        var repo = GetRepository(context);

        var updated = GetSampleModel(1);
        updated = updated with { FirstName = "Jane" };

        var result = await repo.UpdateAsync(updated);

        Assert.NotNull(result);
        Assert.Equal("Jane", result.FirstName);
        Assert.Equal("Jane", context.Speakers.First().FirstName);
    }

    [Fact]
    public async Task UpdateAsync_ThrowsArgumentException_WhenNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(99);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.UpdateAsync(model));
    }

    [Fact]
    public async Task DeleteAsync_DeletesSpeaker_AndReturnsTrue()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Speakers.Add(GetSampleEntity(1));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.DeleteAsync(1);

        Assert.True(result);
        Assert.Empty(context.Speakers);
    }

    [Fact]
    public async Task DeleteAsync_ThrowsArgumentException_WhenNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.DeleteAsync(99));
    }

    // Edge case: AddAsync with minimal data
    [Fact]
    public async Task AddAsync_AllowsSpeakerWithNullProperties()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = new Speaker { Id = 2 };

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal(2, result.Id);
    }

    // Edge case: UpdateAsync with null/empty fields
    [Fact]
    public async Task UpdateAsync_UpdatesSpeaker_WithNullFields()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var entity = GetSampleEntity(3);
        context.Speakers.Add(entity);
        context.SaveChanges();

        var repo = GetRepository(context);

        var updated = new Speaker
        {
            Id = 3,
            FirstName = null,
            LastName = null,
            Sat = false,
            Sun = false,
            Favorite = false,
            Bio = null,
            Company = null,
            TwitterHandle = null,
            UserBioShort = null,
            ImageUrl = null,
            Email = null,
            Photo = null
        };

        var result = await repo.UpdateAsync(updated);

        Assert.NotNull(result);
        Assert.Null(result.FirstName);
        Assert.Null(result.LastName);
    }
}