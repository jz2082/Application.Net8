// <auto-generated>
using System;
using System.Linq;
using System.Threading.Tasks;
using Demo.InMemoryDb.Repository;
using InMemoryDb.Model;
using InMemoryDb.DataEntity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace Demo.InMemoryDb.Repository;

public class ProductRepositoryEdgeCaseTests
{
    private InMemoryDbContext GetDbContext(string dbName)
    {
        var options = new DbContextOptionsBuilder<InMemoryDbContext>()
            .UseInMemoryDatabase(databaseName: dbName)
            .Options;
        return new InMemoryDbContext(options);
    }

    private ProductRepository GetRepository(InMemoryDbContext context)
    {
        var loggerMock = new Mock<ILogger<ProductRepository>>();
        return new ProductRepository(context, loggerMock.Object);
    }

    private Product GetSampleModel(int productId = 1, Guid? id = null) => new Product
    {
        Id = id ?? Guid.NewGuid(),
        ProductId = productId,
        ProductName = "Test Product",
        ProductCode = "TP-001",
        TagList = new[] { "tag1", "tag2" },
        ReleaseDate = new DateTime(2024, 1, 1),
        Price = 10.5,
        Description = "A test product",
        StarRating = 4.5,
        ImageUrl = "http://img"
    };

    [Fact]
    public async Task GetAllAsync_ReturnsEmpty_WhenNoProducts()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAllAsync();

        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetAsync_ReturnsNull_WhenIdIsNegative()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAsync(-1);

        Assert.Null(result);
    }

    [Fact]
    public async Task GetAsync_ReturnsNull_WhenIdIsZero()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAsync(0);

        Assert.Null(result);
    }

    [Fact]
    public async Task AddAsync_ThrowsArgumentException_WhenProductIsNull()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.AddAsync(null));
    }

    [Fact]
    public async Task AddAsync_AllowsProductWithMinimalData()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = new Product 
        { 
            Id = Guid.NewGuid(), 
            ProductId = 2, 
            ProductName = "Test Product", 
            ProductCode = "TP-001", 
            Description = "A test product", 
            ImageUrl = "http://img" 
        };

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal(2, result.ProductId);
    }

    [Fact]
    public async Task AddAsync_AllowsProductWithNullAndEmptyFields()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = new Product
        {
            Id = Guid.NewGuid(),
            ProductId = 3,
            ProductName = null,
            ProductCode = "",
            TagList = null,
            ReleaseDate = DateTime.MinValue,
            Price = 0,
            Description = null,
            StarRating = 0,
            ImageUrl = null
        };

        await Assert.ThrowsAsync<DbUpdateException>(async() => await repo.AddAsync(model));
    }

    [Fact]
    public async Task UpdateAsync_ThrowsArgumentException_WhenProductNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(99);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.UpdateAsync(model));
    }

    [Fact]
    public async Task UpdateAsync_UpdatesProduct_WithNullFields()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var entity = new ProductEntity 
        { 
            Id = Guid.NewGuid(), 
            ProductId = 4, 
            ProductName = "A", 
            ProductCode = "B",
            Description = "A test product",
            Price = 10.5,
            ImageUrl = "http://img"
        };
        try
        {
            context.Products.Add(entity);
            context.SaveChanges();
        }
        catch (Exception ex)
        {
            var msg = ex.Message;
            // Handle the case where the entity already exists
        }

        var repo = GetRepository(context);

        var updated = new Product
        {
            Id = entity.Id,
            ProductId = 4,
            ProductName = null,
            ProductCode = null,
            TagList = null,
            ReleaseDate = DateTime.MinValue,
            Price = 0,
            Description = null,
            StarRating = 0,
            ImageUrl = null
        };

        await Assert.ThrowsAsync<DbUpdateConcurrencyException>(() => repo.UpdateAsync(updated));
    }

    [Fact]
    public async Task DeleteAsync_ThrowsArgumentException_WhenProductNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.DeleteAsync(999));
    }

    [Fact]
    public async Task DeleteAsync_DeletesProduct_WithZeroId()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        try
        {
            context.Products.Add(new ProductEntity
            {
                Id = Guid.NewGuid(),
                ProductId = 100,
                ProductName = "Test Product",
                ProductCode = "TP-001",
                Description = "A test product",
                ImageUrl = "http://img"
            });
            context.SaveChanges();
        }
        catch (Exception ex)
        {
            var msg = ex.Message;
            // Handle the case where the entity already exists
        }
        
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.DeleteAsync(100));
    }
}