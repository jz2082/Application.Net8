// <auto-generated>
using System;
using System.Linq;
using System.Threading.Tasks;
using Demo.InMemoryDb.Repository;
using InMemoryDb.DataEntity;
using InMemoryDb.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace Demo.InMemoryDb.Repository;

public class ProductRepositoryTests
{
    private InMemoryDbContext GetDbContext(string dbName)
    {
        var options = new DbContextOptionsBuilder<InMemoryDbContext>()
            .UseInMemoryDatabase(databaseName: dbName)
            .Options;
        return new InMemoryDbContext(options);
    }

    private ProductRepository GetRepository(InMemoryDbContext context)
    {
        var loggerMock = new Mock<ILogger<ProductRepository>>();
        return new ProductRepository(context, loggerMock.Object);
    }

    private ProductEntity GetSampleEntity(int productId = 1, Guid? id = null) => new ProductEntity
    {
        Id = id ?? Guid.NewGuid(),
        ProductId = productId,
        ProductName = "Test Product",
        ProductCode = "TP-001",
        TagList = new[] { "tag1", "tag2" },
        ReleaseDate = new DateTime(2024, 1, 1),
        Price = 10.5,
        Description = "A test product",
        StarRating = 4.5,
        ImageUrl = "http://img"
    };

    private Product GetSampleModel(int productId = 1, Guid? id = null) => new Product
    {
        Id = id ?? Guid.NewGuid(),
        ProductId = productId,
        ProductName = "Test Product",
        ProductCode = "TP-001",
        TagList = new[] { "tag1", "tag2" },
        ReleaseDate = new DateTime(2024, 1, 1),
        Price = 10.5,
        Description = "A test product",
        StarRating = 4.5,
        ImageUrl = "http://img"
    };

    [Fact]
    public async Task GetAllAsync_ReturnsAllProducts()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Products.Add(GetSampleEntity(1));
        context.Products.Add(GetSampleEntity(2));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetAllAsync();

        Assert.NotNull(result);
        Assert.Equal(2, result.Count());
    }

    [Fact]
    public async Task GetAllAsync_ReturnsEmptyList_WhenNoProducts()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAllAsync();

        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetAsync_ReturnsProduct_WhenExists()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var entity = GetSampleEntity(5);
        context.Products.Add(entity);
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetAsync(5);

        Assert.NotNull(result);
        Assert.Equal(5, result.ProductId);
    }

    [Fact]
    public async Task GetAsync_ReturnsNull_WhenNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAsync(999);

        Assert.Null(result);
    }

    [Fact]
    public async Task AddAsync_AddsProduct_AndReturnsProduct()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(10);

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal(model.ProductId, result.ProductId);
        Assert.Single(context.Products);
    }

    [Fact]
    public async Task AddAsync_ThrowsArgumentException_WhenNull()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.AddAsync(null));
    }

    [Fact]
    public async Task UpdateAsync_UpdatesProduct_AndReturnsProduct()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var entity = GetSampleEntity(20);
        context.Products.Add(entity);
        context.SaveChanges();

        var repo = GetRepository(context);

        var updated = GetSampleModel(20, entity.Id) with { ProductName = "Updated", Price = 99.9 };

        var result = await repo.UpdateAsync(updated);

        Assert.NotNull(result);
        Assert.Equal("Updated", result.ProductName);
        Assert.Equal(99.9, result.Price);
        Assert.Equal("Updated", context.Products.First().ProductName);
    }

    [Fact]
    public async Task UpdateAsync_ThrowsArgumentException_WhenNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(99);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.UpdateAsync(model));
    }

    [Fact]
    public async Task DeleteAsync_DeletesProduct_AndReturnsTrue()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var entity = GetSampleEntity(30);
        context.Products.Add(entity);
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.DeleteAsync(30);

        Assert.True(result);
        Assert.Empty(context.Products);
    }

    [Fact]
    public async Task DeleteAsync_ThrowsArgumentException_WhenNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.DeleteAsync(999));
    }
}