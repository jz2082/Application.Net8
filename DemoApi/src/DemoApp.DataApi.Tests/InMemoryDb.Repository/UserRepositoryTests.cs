// <auto-generated>
using System;
using System.Linq;
using System.Threading.Tasks;
using Demo.InMemoryDb.Repository;
using InMemoryDb.DataEntity;
using InMemoryDb.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace Demo.InMemoryDb.Repository;

public class UserRepositoryTests
{
    private InMemoryDbContext GetDbContext(string dbName)
    {
        var options = new DbContextOptionsBuilder<InMemoryDbContext>()
            .UseInMemoryDatabase(databaseName: dbName)
            .Options;
        return new InMemoryDbContext(options);
    }

    private UserRepository GetRepository(InMemoryDbContext context)
    {
        var loggerMock = new Mock<ILogger<UserRepository>>();
        return new UserRepository(context, loggerMock.Object);
    }

    private UserEntity GetSampleEntity(int id = 1, string name = "alice", string password = "pw") => new UserEntity
    {
        Id = id,
        Name = name,
        Password = password,
        FavoriteColor = "blue",
        Role = "user",
        GoogleId = "gid"
    };

    [Fact]
    public async Task GetAllAsync_ReturnsAllUsers()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Users.Add(GetSampleEntity(1, "alice"));
        context.Users.Add(GetSampleEntity(2, "bob"));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetAllAsync();

        Assert.NotNull(result);
        Assert.Equal(2, result.Count());
        Assert.Contains(result, u => u.Name == "alice");
        Assert.Contains(result, u => u.Name == "bob");
    }

    [Fact]
    public async Task GetAllAsync_ReturnsEmpty_WhenNoUsers()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAllAsync();

        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetAllAsync_ReturnsUsersWithNullProperties()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Users.Add(new UserEntity { Id = 1, Name = null, Password = null, FavoriteColor = null, Role = null, GoogleId = null });
        context.SaveChanges();

        var repo = GetRepository(context);
        var result = await repo.GetAllAsync();

        Assert.Single(result);
        var user = result.First();
        Assert.Null(user.Name);
        Assert.Null(user.FavoriteColor);
    }

    [Fact]
    public async Task GetAsync_ReturnsUser_WhenExists()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Users.Add(GetSampleEntity(1, "alice"));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetAsync("alice");

        Assert.NotNull(result);
        Assert.Equal("alice", result.Name);
    }

    [Fact]
    public async Task GetAsync_ReturnsNull_WhenNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAsync("notfound");

        Assert.Null(result);
    }

    [Fact]
    public async Task GetAsync_ReturnsNull_WhenUsernameIsNull()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAsync(null);

        Assert.Null(result);
    }

    [Fact]
    public async Task GetAsync_ReturnsNull_WhenUsernameIsEmpty()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAsync(string.Empty);

        Assert.Null(result);
    }

    [Fact]
    public async Task GetAsync_ReturnsUser_WhenNameHasSpecialCharacters()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var specialName = "user!@#";
        context.Users.Add(GetSampleEntity(1, specialName));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetAsync(specialName);

        Assert.NotNull(result);
        Assert.Equal(specialName, result.Name);
    }

    [Fact]
    public async Task GetByUsernameAndPasswordAsync_ReturnsUser_WhenExists()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Users.Add(GetSampleEntity(1, "alice", "pw"));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetByUsernameAndPasswordAsync("alice", "pw");

        Assert.NotNull(result);
        Assert.Equal("alice", result.Name);
    }

    [Fact]
    public async Task GetByUsernameAndPasswordAsync_ReturnsNull_WhenNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetByUsernameAndPasswordAsync("notfound", "pw");

        Assert.Null(result);
    }

    [Fact]
    public async Task GetByUsernameAndPasswordAsync_ReturnsNull_WhenUsernameIsNull()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetByUsernameAndPasswordAsync(null, "pw");

        Assert.Null(result);
    }

    [Fact]
    public async Task GetByUsernameAndPasswordAsync_ReturnsNull_WhenPasswordIsNull()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetByUsernameAndPasswordAsync("alice", null);

        Assert.Null(result);
    }

    [Fact]
    public async Task GetByUsernameAndPasswordAsync_ReturnsUser_WhenPasswordIsIncorrect()
    {
        // Note: Repository only checks username, not password!
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Users.Add(GetSampleEntity(1, "alice", "pw"));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetByUsernameAndPasswordAsync("alice", "wrongpw");

        Assert.NotNull(result);
        Assert.Equal("alice", result.Name);
    }

    [Fact]
    public async Task GetByUsernameAndPasswordAsync_ReturnsUser_WhenNameHasWhitespace()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var name = "alice smith";
        context.Users.Add(GetSampleEntity(1, name, "pw"));
        context.SaveChanges();

        var repo = GetRepository(context);

        var result = await repo.GetByUsernameAndPasswordAsync(name, "pw");

        Assert.NotNull(result);
        Assert.Equal(name, result.Name);
    }
}