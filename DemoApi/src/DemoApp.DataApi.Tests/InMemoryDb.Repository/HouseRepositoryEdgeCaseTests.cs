// <auto-generated>
using System;
using System.Linq;
using System.Threading.Tasks;
using Demo.InMemoryDb.Repository;
using InMemoryDb.Model;
using InMemoryDb.DataEntity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace Demo.InMemoryDb.Repository;

public class HouseRepositoryEdgeCaseTests
{
    private InMemoryDbContext GetDbContext(string dbName)
    {
        var options = new DbContextOptionsBuilder<InMemoryDbContext>()
            .UseInMemoryDatabase(databaseName: dbName)
            .Options;
        return new InMemoryDbContext(options);
    }

    private HouseRepository GetRepository(InMemoryDbContext context)
    {
        var loggerMock = new Mock<ILogger<HouseRepository>>();
        return new HouseRepository(context, loggerMock.Object);
    }

    private House GetSampleModel(int id = 1) => new House
    {
        Id = id,
        Address = "123 Main St",
        Country = "USA",
        Description = "A nice house",
        Price = 100000,
        Photo = "photo.jpg",
        RowVersion = new byte[] { 1, 2, 3 }
    };

    [Fact]
    public async Task GetAllAsync_ReturnsEmpty_WhenNoHouses()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAllAsync();

        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetAsync_ReturnsNull_WhenIdIsNegative()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAsync(-1);

        Assert.Null(result);
    }

    [Fact]
    public async Task GetAsync_ReturnsNull_WhenIdIsZero()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAsync(0);

        Assert.Null(result);
    }

    [Fact]
    public async Task AddAsync_ThrowsArgumentException_WhenHouseIsNull()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.AddAsync(null));
    }

    [Fact]
    public async Task AddAsync_AllowsHouseWithMinimalData()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = new House { Id = 2 };

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal(2, result.Id);
    }

    [Fact]
    public async Task AddAsync_AllowsHouseWithNullAndEmptyFields()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = new House
        {
            Id = 3,
            Address = null,
            Country = "",
            Description = null,
            Price = 0,
            Photo = null,
            RowVersion = null
        };

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal(3, result.Id);
        Assert.Null(result.Address);
        Assert.Equal("", result.Country);
    }

    [Fact]
    public async Task UpdateAsync_ThrowsArgumentException_WhenHouseNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(99);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.UpdateAsync(model));
    }

    [Fact]
    public async Task UpdateAsync_UpdatesHouse_WithNullFields()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var entity = new HouseEntity { Id = 4, Address = "A", Country = "B" };
        context.Houses.Add(entity);
        context.SaveChanges();

        var repo = GetRepository(context);

        var updated = new House
        {
            Id = 4,
            Address = null,
            Country = null,
            Description = null,
            Price = 0,
            Photo = null,
            RowVersion = null
        };

        var result = await repo.UpdateAsync(updated);

        Assert.NotNull(result);
        Assert.Null(result.Address);
        Assert.Null(result.Country);
    }

    [Fact]
    public async Task DeleteAsync_ThrowsArgumentException_WhenHouseNotFound()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.DeleteAsync(999));
    }

    [Fact]
    public async Task DeleteAsync_DeletesHouse_WithZeroId()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        context.Houses.Add(new HouseEntity { Id = 0 });
        context.SaveChanges();

        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.DeleteAsync(0));
    }
}