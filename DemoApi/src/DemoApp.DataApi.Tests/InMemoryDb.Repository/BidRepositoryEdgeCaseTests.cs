// <auto-generated>
using System;
using System.Linq;
using System.Threading.Tasks;
using Demo.InMemoryDb.Repository;
using InMemoryDb.DataEntity;
using InMemoryDb.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace Demo.InMemoryDb.Repository;

public class BidRepositoryEdgeCaseTests
{
    private InMemoryDbContext GetDbContext(string dbName)
    {
        var options = new DbContextOptionsBuilder<InMemoryDbContext>()
            .UseInMemoryDatabase(databaseName: dbName)
            .Options;
        return new InMemoryDbContext(options);
    }

    private BidRepository GetRepository(InMemoryDbContext context)
    {
        var loggerMock = new Mock<ILogger<BidRepository>>();
        return new BidRepository(context, loggerMock.Object);
    }

    private Bid GetSampleModel(int id = 1, int houseId = 1, string bidder = "alice", int amount = 100) => new Bid
    {
        Id = id,
        HouseId = houseId,
        Bidder = bidder,
        Amount = amount
    };

    [Fact]
    public async Task GetAllAsync_ReturnsEmpty_WhenHouseIdIsNegative()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAllAsync(-1);

        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetAllAsync_ReturnsEmpty_WhenHouseIdIsZero()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var result = await repo.GetAllAsync(0);

        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task AddAsync_ThrowsArgumentException_WhenBidIsNull()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        await Assert.ThrowsAsync<ArgumentException>(() => repo.AddAsync(null));
    }

    [Fact]
    public async Task AddAsync_AllowsBidWithZeroAmount()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(0, 1, "alice", 0);

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal(0, result.Amount);
    }

    [Fact]
    public async Task AddAsync_AllowsBidWithNegativeAmount()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(0, 1, "alice", -100);

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal(-100, result.Amount);
    }

    [Fact]
    public async Task AddAsync_AllowsBidWithNullBidder()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        // Note: bidder can not be null.
        var model = GetSampleModel(0, 1, "asdf", 100);

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        //Assert.Null(result.Bidder);
    }

    [Fact]
    public async Task AddAsync_AllowsBidWithEmptyBidder()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(0, 1, "", 100);

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal("", result.Bidder);
    }

    [Fact]
    public async Task AddAsync_AllowsBidWithLargeAmount()
    {
        var dbName = Guid.NewGuid().ToString();
        using var context = GetDbContext(dbName);
        var repo = GetRepository(context);

        var model = GetSampleModel(0, 1, "alice", int.MaxValue);

        var result = await repo.AddAsync(model);

        Assert.NotNull(result);
        Assert.Equal(int.MaxValue, result.Amount);
    }
}